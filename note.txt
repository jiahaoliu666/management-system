├── src/
│   ├── auth/              # 身份驗證相關邏輯
│   │   ├── AuthContext.tsx    # 全局身份驗證狀態管理
│   │   └── ProtectedRoute.tsx # 受保護路由組件
│   │
│   ├── components/        #  UI 組件
│   │   ├── Dashboard.tsx      # 儀表板
│   │   ├── DocumentsView.tsx  # 文件管理
│   │   ├── EditorView.tsx     # 文件編輯器視圖
│   │   ├── Header.tsx         # 頁面頂部
│   │   ├── Sidebar.tsx        # 側邊導航欄
│   │   ├── TeamView.tsx       # 團隊成員
│   │   └── modals/          # 彈出視窗組件
│   │       ├── ModalBase.tsx               # 基礎彈出視窗
│   │       ├── ProfileModal.tsx            # 個人資料彈出視窗
│   │       ├── SettingsModal.tsx           # 設定彈出視窗
│   │       └── NotificationSettingsModal.tsx # 通知設定彈出視窗
│   │       └── InviteMemberModal.tsx # 邀請成員彈出視窗
│   │       └── DeleteMemberModal.tsx # 刪除成員彈出視窗
│   │
│   ├── layouts/           # 頁面佈局組件
│   │   └── MainLayout.tsx     # 主要應用佈局
│   │
│   ├── lib/               # 核心邏輯或第三方庫封裝
│   │   ├── api/             # API 請求相關
│   │   │   └── apiClient.ts   # Axios API 客戶端實例
│   │   ├── config/          # 配置文件
│   │   │   └── cognito.ts     # AWS Cognito 服務配置
│   │   └── hooks/           # 自定義 React Hooks
│   │       ├── useCognito.ts    # Cognito 身份驗證 Hook
│   │       ├── useCognitoUsers.ts # 獲取 Cognito 用戶清單的 Hook
│   │       └── useSecurityMonitor.ts # 用戶活動安全監控 Hook
│   │       └── useDirectoryTree.ts # 文件目錄 Hook
│   │
│   ├── pages/             # 應用頁面
│   │   ├── _app.tsx         # Next.js 應用根組件
│   │   ├── 404.tsx          # 404 錯誤頁面
│   │   ├── index.tsx        # 首頁
│   │   └── login.tsx        # 登入頁面
│   │   └── api/             # API 請求相關
│   │       └── invite-user.ts # 邀請成員 API
│   │       └── delete-user.ts # 刪除成員 API
│   │       └── cognito-users.ts # 獲取 Cognito 用戶清單 API
│   │       └── folder.ts # 新增、修改、刪除目錄 API
│   │       └── file.ts # 新增、修改、刪除文件 API
│   │
│   ├── styles/            # 樣式文件
│   │   ├── globals.css      # 全局 CSS 樣式
│   │   └── toast.css        # Toast 通知的樣式
│   │
│   ├── types/             # TypeScript 型別定義
│   │   └── index.ts         # 全局型別定義
│   │
│   └── utils/             # 工具函式
│       ├── constants.ts     # 應用程序常數
│       └── notification.ts  # 通知顯示工具
│
------------------------------------
請幫我優化當前彈出的個人資料卡片視窗 UI 樣式設計，要求具備良好的用戶體驗和專業視覺效果，
包括：色彩搭配、排版佈局、元件間距、響應式設計等方面的改進，
同時確保 CSS/樣式代碼結構清晰、可維護性高，並遵循現代前端開發最佳實踐

根據當前專案需求，UI介面再幫我添加更加完善且完整、常用且必須使用到的功能，
同時遵循現代前端開發最佳實踐，專業、優雅、人性化且易於維護的UI設計，大幅提升用戶體驗和視覺效果。
以上不需要功能 只需要前端UI介面設計即可，不需要詢問，直接幫我修改即可

同時遵循現代 Web 開發最佳實踐、官方最佳建議做法，並且直接幫我修改即可
------------------待完成

1. 儀表板 (Dashboard)
最近文件、活動、統計卡片
點擊最近文件、活動、我的最愛需跳轉或詳細頁面

2. 文件管理（DocumentsView）：
收藏（Star）、分享（Share2）、更多（MoreVertical）按鈕
點擊文件卡片，實際跳轉或詳細頁面。
標籤過濾

3. 文件編輯器（EditorView）
標題、分類、標籤、內容編輯、儲存、發布、預覽功能實現
編輯器工具列（粗體、斜體等）實際文字格式化功能
分類下拉選單
儲存、發布

4. 團隊成員（TeamView）
一次大量邀請成員

5. 側邊欄（Sidebar）
目錄樹（fileDirectoryTree）為實際目錄結構
點擊分類/目錄後，觸發文件過濾或載入該分類下文件
新增/刪除/重命名目錄等功能
儲存密碼，並且目錄要上鎖、目錄上鎖要有密碼提示
添加操作紀錄

6. Header（Header.tsx）
搜尋、篩選、通知、用戶選單
搜尋欄位觸發後端搜尋 API
篩選按鈕事件處理
通知列表串接後端通知 API
版本更新記錄

7. 其他：
toast 不要擋到右上角的 profile 
全局響應式頁面
全局深/淺顏色切換
CORS IP 限定特定domain
policy 最小權限調整

建立文件目錄 -> 文件編輯器 -> 文件管理 -> 儀表板 -> 通知
------------------------------------進行中
同時遵循現代 Web 開發最佳實踐、官方最佳建議做法，並且直接幫我修改即可

根據此專案需求和代碼，現在我要實現 文件目錄的功能，數據會儲存在AWS，那該如何實現？
根據當前專案和代碼，先幫我實現新增/修改/刪除目錄或文件的功能
前端的文件目錄不要使用模擬值，使用真實 AWS 的資料庫，同時遵循現代 Web 開發最佳實踐、官方最佳建議做法

現在我要實現文件目錄的功能，數據會儲存在AWS，根據當前代碼，下一步該做什麼？
同時遵循現代 Web 開發最佳實踐、官方最佳建議做法

根據文件目錄的功能，我需要實現的是 用戶在文件目錄區塊可以右鍵進行創建、刪除、編輯資料夾等功能，
並且數據會儲存在AWS，根據此需求，我該如何實現

符合當前專案的UI樣式即可，同時遵循現代 Web 開發最佳實踐、官方最佳建議做法，並且直接幫我修改即可

既然是右鍵任一資料夾節點或空白區，彈出選單（新增、重新命名、刪除）．
那這樣還需要使用單一的DIRECTORY_TABLE_NAME嗎

那根據當前專案和需求，DynamoDB Table該如何設置，以及DIRECTORY_TABLE_NAME 名稱應為何
同時遵循現代 Web 開發最佳實踐、官方最佳建議做法

已經建立好 DynamoDB Table 且沒有報錯了，但文件目錄區塊為空的值，應可以右鍵進行創建、刪除、編輯資料夾等功能
同時遵循現代 Web 開發最佳實踐、官方最佳建議做法，並且直接幫我修改即可
------------------------------------已完成
現在我要實現 ProfileModal 組件的頭像上傳功能。當用戶點擊上傳頭像按鈕時，需要完成以下流程：
1) 選擇並上傳圖片檔案至 AWS S3 儲存桶
2) 獲取上傳後的 S3 圖片 URL
3) 將此 URL 更新到 AWS Cognito 用戶的 picture 屬性中
4) 即時更新 UI 中的頭像顯示為新上傳的圖片。請實現包含檔案選擇、S3 上傳、Cognito 屬性更新、以及錯誤處理的完整功能。
-------
現在我要實現 profilemodal的個人資料更改密碼的功能：
當用戶輸入目前密碼、新密碼&確認新密碼後並點擊儲存變更 要能變更 AWS Cognito 的用戶密碼
同時遵循現代 Web 開發最佳實踐、官方最佳建議做法，並且直接幫我修改即可
-------
現在我要優化 React ProfileModal 組件的頭像上傳功能：在現有的 AWS S3 上傳和 Cognito 更新基礎上，需要實現四個關鍵改進 -
(1) 添加檔案類型驗證，僅允許圖片格式（jpg, png, gif 等），排除文檔類型；
(2) 修改上傳檔案命名邏輯，將前綴從用戶 sub ID 改為 email，格式為 email_timestamp.extension；
(3) 實現舊檔案清理機制，上傳新頭像時自動刪除 S3 中的舊頭像檔案；
(4) 改變保存時機，將頭像上傳從即時改為延遲執行，只有當用戶點擊「儲存變更」按鈕時才真正提交到 S3 和 Cognito，並在成功後刷新 UI 頭像顯示而不重載整頁。
-------
現在我要實現團隊成員加入日期的功能：
當用戶點擊"發送邀請"按鈕邀請新成員時，需要在 AWS Cognito 用戶池中創建或更新該成員的 birthdate 屬性，
將值設置為當前日期並格式化為 YYYY-MM-DD 格式（例如：2025-06-24），這個日期將作為該成員的團隊加入日期記錄。
-------
現在我要實現團隊成員的搜尋、篩選功能：
當在團隊成員的搜尋欄輸入用戶名稱或電子郵件時要能夠進行過濾篩選搜尋
-------
現在我要實現一個團隊成員列表的即時搜尋功能。當用戶在團隊成員當中的搜尋輸入框中輸入關鍵字時，
系統應該即時過濾顯示的團隊成員列表，搜尋範圍包括成員的姓名和電子郵件地址，
支援部分匹配（模糊搜尋），搜尋不區分大小寫，並且當搜尋框清空時恢復顯示所有成員。
-------
現在我要優化團隊成員列表的即時搜尋功能
默認情況要顯示共 x 個成員的功能
移除鍵盤快捷鍵支援（Ctrl+F 聚焦，Escape 清空）的功能
移除💡 提示：使用 Ctrl+F 快速搜尋，支援姓名和信箱模糊搜尋，按 Escape 清空搜尋的部分
-------
